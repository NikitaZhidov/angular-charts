"use strict";(self.webpackChunkangular_charts=self.webpackChunkangular_charts||[]).push([[592],{1753:(p,d,n)=>{n.d(d,{n:()=>S,Y:()=>h});var c=n(5917),g=n(7574),t=(()=>{return(e=t||(t={})).Temperature="Temperature",e.Humidity="Humidity",e.Light="Light",t;var e})(),o=n(8965),a=(()=>{return(e=a||(a={})).lx="lx",e.humidity="humidity",e.celsius="celsius",a;var e})();const f=[{id:0,name:"Humidity sensor [1]",type:t.Humidity,unit:a.humidity},{id:1,name:"Light sensor",type:t.Light,unit:a.lx},{id:2,name:"Temperature sensor",type:t.Temperature,unit:a.celsius},{id:3,name:"Humidity sensor [2]",type:t.Humidity,unit:a.humidity}];var y=n(7716);let h=(()=>{class e{getAvailableSensors(){return(0,c.of)(f)}getSensorData(r,l=new Date(Date.now()-6e4),i=60){return i<0&&(i=0),new g.y(s=>{const m=f.find(u=>u.id===r);m?setTimeout(()=>{s.next({sensor:m,data:this._generateMockSensorReading(m.type,l,i)}),s.complete()},50):s.error(new Error("Sensor not found"))})}_generateMockSensorReading(r,l,i){const s=l.getTime();switch(r){case t.Light:return new Array(i).fill(0).map((m,u)=>({value:(0,o.H)(300,400),timestamp:s+1e3*u}));case t.Temperature:return new Array(i).fill(0).map((m,u)=>({value:(0,o.H)(5,40),timestamp:s+1e3*u}));case t.Humidity:return new Array(i).fill(0).map((m,u)=>({value:Math.random(),timestamp:s+1e3*u}))}return[]}}return e.\u0275fac=function(r){return new(r||e)},e.\u0275prov=y.Yz7({token:e,factory:e.\u0275fac,providedIn:"root"}),e})(),S=(()=>{class e{getItem(r){return localStorage.getItem(r)}setItem(r,l){localStorage.setItem(r,l)}removeItem(r){localStorage.removeItem(r)}}return e.\u0275fac=function(r){return new(r||e)},e.\u0275prov=y.Yz7({token:e,factory:e.\u0275fac,providedIn:"root"}),e})()},8965:(p,d,n)=>{n.d(d,{H:()=>c,m:()=>g});const c=(t,o)=>Math.floor(Math.random()*(o-t+1)+t),g=()=>{let o="#";for(let a=0;a<6;a++)o+="0123456789ABCDEF"[c(0,15)];return o}}}]);